// The key will be the col number
function map(key, value) {
  let intermediate = [];

  let cells = value.split(',');

  cells.forEach(
    (cell, index) => intermediate.push({
      key: index,
      value: { 
        position: key,
        cell: cell
      }
    })
  );

  return intermediate;
}

function reduce(key, values){

  // Stores the nb of cells in the line (cells are ',' separated in CSV file)
  let nbCells = 0;

  // Stores the cells. We will use this list to generate the csv line later.
  let cells = [];

  // The CSV line that will be generated within this function
  let line = '';

  values.forEach(
    value => {
      // Updates the cells counter
      if( value.position > nbCells)
        nbCells++;

      // Stores the cell in the temporary list at the index of the cell position.
      cells[value.position] = value.cell;
    }
  );

  // Creates the csv line
  cells.forEach(
    cell => line = line.concat(cell, ',')
  );

  // Remove the last character of the line if there is at least one cell
  if( line != '')
    line = line.slice(0, -1);

  return {
    key: key,
    value: line
  };
}

// First step: input reader. The input reader split the csv file by line
const csv = [
  { key: 0, value: 'Name,Time,Score' },
  { key: 1, value: 'Dan,68,20' },
  { key: 2, value: 'Suse,42,40' },
  { key: 3, value: 'Tracy,50,38' }
];

// Second step: the mapper function is called
const mapResult = csv.map(
  line => map(line.key, line.value)
);

// Third step: shuffle and sort. This is handled by the Framework.
// The elements generated by the Framework are of this kind:

let resultToReduce = {
  key: 0, list: [
    { position: 0, cell: 'Name' },
    { position: 3, cell: 'Tracy' },
    { position: 2, cell: 'Suse' },
    { position: 1, cell: 'Dan' }
  ]
};

// Fourth step: the reducer function is called.
const resultReduced = reduce(resultToReduce.key, resultToReduce.list);
